-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> S                                  (0)
	S -> E eol                                         (1)
	S -> E ms eol                                      (2)
	E -> int                                           (3)
	E -> real                                          (4)
	E -> const                                         (5)
	E -> "(" E ")"                                     (6)
	E -> "-" E                                         (7)
	E -> sqrt E                                        (8)
	E -> E "+" E                                       (9)
	E -> E "*" E                                       (10)
	E -> E "/" E                                       (11)
	E -> E "=" E                                       (12)
	E -> E "^" E                                       (13)
	E -> E "-" E                                       (14)
	E -> E "%" E                                       (15)
	E -> ifz E then E else E                           (16)
	E -> mr                                            (17)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	"="            { OpTok EqOp }
	"+"            { OpTok PlusOp }
	"-"            { OpTok SubOp }
	"*"            { OpTok MultOp }
	"^"            { OpTok ExpOp }
	"/"            { OpTok DivOp }
	"%"            { OpTok ModOp }
	mr             { MRTok }
	ms             { MSTok }
	ifz            { IfzTok }
	then           { ThenTok }
	else           { ElseTok }
	"("            { LeftPTok }
	")"            { RightPTok }
	sqrt           { SqrtTok }
	eol            { EOLTok }
	const          { ConstTok $$ }
	int            { IntTok $$ }
	real           { Realtok $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	S               rules 1, 2
	E               rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . S                                 (rule 0)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	S              goto state 11
	E              goto state 12

State 1

	S -> . E eol                                        (rule 1)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 2

State 2

	S -> E . eol                                        (rule 1)
	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            shift, and enter state 16
	"^"            shift, and enter state 17
	"/"            shift, and enter state 18
	"%"            shift, and enter state 19
	eol            shift, and enter state 21


State 3

	E -> "-" . E                                        (rule 7)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 25

State 4

	E -> mr .                                           (rule 17)

	"="            reduce using rule 17
	"+"            reduce using rule 17
	"-"            reduce using rule 17
	"*"            reduce using rule 17
	"^"            reduce using rule 17
	"/"            reduce using rule 17
	"%"            reduce using rule 17
	ms             reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	")"            reduce using rule 17
	eol            reduce using rule 17


State 5

	E -> ifz . E then E else E                          (rule 16)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 24

State 6

	E -> "(" . E ")"                                    (rule 6)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 23

State 7

	E -> sqrt . E                                       (rule 8)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 22

State 8

	E -> const .                                        (rule 5)

	"="            reduce using rule 5
	"+"            reduce using rule 5
	"-"            reduce using rule 5
	"*"            reduce using rule 5
	"^"            reduce using rule 5
	"/"            reduce using rule 5
	"%"            reduce using rule 5
	ms             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	")"            reduce using rule 5
	eol            reduce using rule 5


State 9

	E -> int .                                          (rule 3)

	"="            reduce using rule 3
	"+"            reduce using rule 3
	"-"            reduce using rule 3
	"*"            reduce using rule 3
	"^"            reduce using rule 3
	"/"            reduce using rule 3
	"%"            reduce using rule 3
	ms             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	")"            reduce using rule 3
	eol            reduce using rule 3


State 10

	E -> real .                                         (rule 4)

	"="            reduce using rule 4
	"+"            reduce using rule 4
	"-"            reduce using rule 4
	"*"            reduce using rule 4
	"^"            reduce using rule 4
	"/"            reduce using rule 4
	"%"            reduce using rule 4
	ms             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	")"            reduce using rule 4
	eol            reduce using rule 4


State 11

	%start_parse -> S .                                 (rule 0)

	%eof           accept


State 12

	S -> E . eol                                        (rule 1)
	S -> E . ms eol                                     (rule 2)
	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            shift, and enter state 16
	"^"            shift, and enter state 17
	"/"            shift, and enter state 18
	"%"            shift, and enter state 19
	ms             shift, and enter state 20
	eol            shift, and enter state 21


State 13

	E -> E "=" . E                                      (rule 12)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 35

State 14

	E -> E "+" . E                                      (rule 9)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 34

State 15

	E -> E "-" . E                                      (rule 14)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 33

State 16

	E -> E "*" . E                                      (rule 10)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 32

State 17

	E -> E "^" . E                                      (rule 13)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 31

State 18

	E -> E "/" . E                                      (rule 11)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 30

State 19

	E -> E "%" . E                                      (rule 15)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 29

State 20

	S -> E ms . eol                                     (rule 2)

	eol            shift, and enter state 28


State 21

	S -> E eol .                                        (rule 1)

	%eof           reduce using rule 1


State 22

	E -> sqrt E .                                       (rule 8)
	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            reduce using rule 8
	"+"            reduce using rule 8
	"-"            reduce using rule 8
	"*"            reduce using rule 8
	"^"            reduce using rule 8
	"/"            reduce using rule 8
	"%"            reduce using rule 8
	ms             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	")"            reduce using rule 8
	eol            reduce using rule 8


State 23

	E -> "(" E . ")"                                    (rule 6)
	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            shift, and enter state 16
	"^"            shift, and enter state 17
	"/"            shift, and enter state 18
	"%"            shift, and enter state 19
	")"            shift, and enter state 27


State 24

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)
	E -> ifz E . then E else E                          (rule 16)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            shift, and enter state 16
	"^"            shift, and enter state 17
	"/"            shift, and enter state 18
	"%"            shift, and enter state 19
	then           shift, and enter state 26


State 25

	E -> "-" E .                                        (rule 7)
	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            reduce using rule 7
	"-"            reduce using rule 7
	"*"            reduce using rule 7
	"^"            reduce using rule 7
	"/"            reduce using rule 7
	"%"            reduce using rule 7
	ms             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	")"            reduce using rule 7
	eol            reduce using rule 7


State 26

	E -> ifz E then . E else E                          (rule 16)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 36

State 27

	E -> "(" E ")" .                                    (rule 6)

	"="            reduce using rule 6
	"+"            reduce using rule 6
	"-"            reduce using rule 6
	"*"            reduce using rule 6
	"^"            reduce using rule 6
	"/"            reduce using rule 6
	"%"            reduce using rule 6
	ms             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	")"            reduce using rule 6
	eol            reduce using rule 6


State 28

	S -> E ms eol .                                     (rule 2)

	%eof           reduce using rule 2


State 29

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)
	E -> E "%" E .                                      (rule 15)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            shift, and enter state 16
	"^"            reduce using rule 15
	"/"            shift, and enter state 18
	"%"            reduce using rule 15
	ms             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	")"            reduce using rule 15
	eol            reduce using rule 15


State 30

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E "/" E .                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            reduce using rule 11
	"^"            reduce using rule 11
	"/"            reduce using rule 11
	"%"            reduce using rule 11
	ms             reduce using rule 11
	then           reduce using rule 11
	else           reduce using rule 11
	")"            reduce using rule 11
	eol            reduce using rule 11


State 31

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E "^" E .                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            shift, and enter state 16
	"^"            reduce using rule 13
	"/"            shift, and enter state 18
	"%"            reduce using rule 13
	ms             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	")"            reduce using rule 13
	eol            reduce using rule 13


State 32

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E "*" E .                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            reduce using rule 10
	"^"            reduce using rule 10
	"/"            reduce using rule 10
	"%"            reduce using rule 10
	ms             reduce using rule 10
	then           reduce using rule 10
	else           reduce using rule 10
	")"            reduce using rule 10
	eol            reduce using rule 10


State 33

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E "-" E .                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            reduce using rule 14
	"-"            reduce using rule 14
	"*"            reduce using rule 14
	"^"            reduce using rule 14
	"/"            reduce using rule 14
	"%"            reduce using rule 14
	ms             reduce using rule 14
	then           reduce using rule 14
	else           reduce using rule 14
	")"            reduce using rule 14
	eol            reduce using rule 14


State 34

	E -> E . "+" E                                      (rule 9)
	E -> E "+" E .                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            shift, and enter state 13
	"+"            reduce using rule 9
	"-"            reduce using rule 9
	"*"            reduce using rule 9
	"^"            reduce using rule 9
	"/"            reduce using rule 9
	"%"            reduce using rule 9
	ms             reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	")"            reduce using rule 9
	eol            reduce using rule 9


State 35

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E "=" E .                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)

	"="            reduce using rule 12
	"+"            reduce using rule 12
	"-"            reduce using rule 12
	"*"            reduce using rule 12
	"^"            reduce using rule 12
	"/"            reduce using rule 12
	"%"            reduce using rule 12
	ms             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	")"            reduce using rule 12
	eol            reduce using rule 12


State 36

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)
	E -> ifz E then E . else E                          (rule 16)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            shift, and enter state 16
	"^"            shift, and enter state 17
	"/"            shift, and enter state 18
	"%"            shift, and enter state 19
	else           shift, and enter state 37


State 37

	E -> ifz E then E else . E                          (rule 16)

	"-"            shift, and enter state 3
	mr             shift, and enter state 4
	ifz            shift, and enter state 5
	"("            shift, and enter state 6
	sqrt           shift, and enter state 7
	const          shift, and enter state 8
	int            shift, and enter state 9
	real           shift, and enter state 10

	E              goto state 38

State 38

	E -> E . "+" E                                      (rule 9)
	E -> E . "*" E                                      (rule 10)
	E -> E . "/" E                                      (rule 11)
	E -> E . "=" E                                      (rule 12)
	E -> E . "^" E                                      (rule 13)
	E -> E . "-" E                                      (rule 14)
	E -> E . "%" E                                      (rule 15)
	E -> ifz E then E else E .                          (rule 16)

	"="            shift, and enter state 13
	"+"            shift, and enter state 14
	"-"            shift, and enter state 15
	"*"            shift, and enter state 16
	"^"            shift, and enter state 17
	"/"            shift, and enter state 18
	"%"            shift, and enter state 19
	ms             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	")"            reduce using rule 16
	eol            reduce using rule 16


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 18
Number of terminals: 19
Number of non-terminals: 3
Number of states: 39
